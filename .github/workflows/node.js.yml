name: CICD Pipeline for API Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    # Set up services to run the API
    services:
      api:
        image: node:16  # Using Node.js version 16 for the container
        ports:
          - 3000:3000  # Expose the API server on port 3000
        env:
          NODE_ENV: development

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment for building and testing the app
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Step 3: Install dependencies for the Node.js API
      - name: Install Node.js dependencies
        run: |
          cd api
          npm install

      # Step 4: Start the API server
      - name: Start API server
        run: |
          cd api
          nohup node server.js &  # Start the API server in the background
          sleep 10  # Allow the server some time to initialize (adjust as needed)

      # Step 5: Set up Python to run API tests
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Step 6: Install Python dependencies for API testing
      - name: Install Python dependencies
        run: |
          python -m venv venv  # Create a virtual environment for Python
          source venv/bin/activate
          pip install --upgrade pip
          pip install requests  # Install 'requests' library for making API calls

      # Step 7: Run API tests with Python
      - name: Run API tests
        run: |
          python -c "
import requests

# Example API test: Replace with actual endpoints and tests
response = requests.get('http://localhost:3000/api/your-endpoint')
if response.status_code == 200:
    print('Test Passed')
else:
    print('Test Failed')"
