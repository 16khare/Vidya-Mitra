# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    # Step 1: Checkout the code from the repository
    - uses: actions/checkout@v4

    # Step 2: Set up Node.js environment based on the matrix (different Node versions)
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'  # This caches the `node_modules` directory for faster builds

    # Step 3: Install dependencies using `npm ci` for a clean install
    - run: npm ci

    # Step 4: Build the application if a build script is present in package.json
    - run: npm run build --if-present

    # Step 5: Run tests using `npm test`
    - run: npm test

    # Optional Step: Cache dependencies to speed up future runs
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    # Optional Step: Output version of Node.js for debugging
    - name: Output Node.js version
      run: node -v
